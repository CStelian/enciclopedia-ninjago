---
import NavBar from '@components/NavBar.astro'
import Footer from '@components/Footer.astro'
import { Image } from 'astro:assets'
import logo from '@assets/logo.png'

interface Props {
	title: string;
	description: string;
	seoImage: string;
	type: string;
	url: string;
    productionBg: string;
    showLogo: ImageMetadata;
    comingSoon: boolean;
    comingSoonMessage: string;
    isMovie: boolean;
    ageRating: string;
    genres: string[];
    creators: string[];
    releaseDate: string;
}

const { title, description, seoImage, type, url, productionBg, genres, ageRating, creators, isMovie, releaseDate, showLogo, comingSoon, comingSoonMessage } = Astro.props
---

<!DOCTYPE html>
<html lang="en">
	<head>
		<!-- Required meta tags -->
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1" />

		<!-- Primary Meta Tags -->
		<title>{title}</title>
		<meta name="description" content={description} />
		<meta property="og:title" content={title} />
		<meta property="og:description" content={description} />
		<meta property="og:image" content={seoImage} />
		<meta property="og:image:width" content="1200" />
		<meta property="og:image:height" content="630" />
		<meta property="og:type" content={type} />
		<meta property="og:url" content={url} />
		<meta name="twitter:card" content="summary_large_image" />
		<meta name="twitter:site" content="@StelianCioarec" />
		<meta name="twitter:creator" content="@StelianCioarec" />
		<meta name="twitter:title" content={title} />
		<meta name="twitter:description" content={description} />
		<meta name="twitter:image" content={seoImage} />

		<!-- Favicon -->
		<link rel="icon" href="/app-icon.png" />
	</head>
	<body style=`background: url(${productionBg}); background-size: cover; background-position: center; background-attachment: fixed;`>
        <NavBar />

        <main>
            <header>

                <div class="show-info">
                    <div class="logo">
                        <Image src={showLogo} alt="Logo" />
                    </div>
                    <div class="coming-soon">
                        {comingSoon ? <p>{comingSoonMessage}</p> : ''}
                    </div>
                    <div class="show-details">
                        <p class="release-date">
                            {releaseDate}
                        </p>
                        <p class="rating">
                            {ageRating}
                        </p>
                        <p class="genres">
                            {genres.join(', ')}
                        </p>
                    </div>
                    <p class="show-description">
                        {description}
                    </p>
                </div>

            </header>

            <ul class="tabs-list">
                {isMovie || comingSoon ? '' : <li class="tab active-tab" data-id="episoade">
                    Episoade
                </li>}
                <li class={isMovie || comingSoon ? 'tab active-tab' : 'tab'} data-id="detalii">
                    Detalii
                </li>
            </ul>

            <section class={isMovie || comingSoon ? 'tab-content' : 'tab-content active-tab-content'}  id="episoade">
                <slot/>
            </section>

            <section class={isMovie || comingSoon ? 'tab-content active-tab-content' : 'tab-content'} id="detalii">
                <div class="columns">
                    <div class="column">
                        <h2>{title}</h2>
                        <p>{description}</p>
                    </div>
                    <div class="column details-column">
                        <div class="detail">
                            <p>Genuri:</p>
                            <ul>
                                {genres.map(genre => (
                                    <li>{genre}</li>
                                ))}
                            </ul>
                        </div>
                        <div class="detail">
                            <p>Rating:</p>
                            <div class="rating">
                                {ageRating}
                            </div>
                        </div>
                        <div class="detail">
                            <p>Creatori:</p>
                            <ul>
                                {creators.map(creator => (
                                    <li>{creator}</li>
                                ))}
                            </ul>
                        </div>
                    </div>
                </div>
            </section>

        </main>
		<Footer />
	</body>
</html>

<style>
    
    /* http://meyerweb.com/eric/tools/css/reset/ 
		v2.0 | 20110126
		License: none (public domain)
	*/

	html, body, div, span, applet, object, iframe,
	h1, h2, h3, h4, h5, h6, p, blockquote, pre,
	a, abbr, acronym, address, big, cite, code,
	del, dfn, em, img, ins, kbd, q, s, samp,
	small, strike, strong, sub, sup, tt, var,
	b, u, i, center,
	dl, dt, dd, ol, ul, li,
	fieldset, form, label, legend,
	table, caption, tbody, tfoot, thead, tr, th, td,
	article, aside, canvas, details, embed, 
	figure, figcaption, footer, header, hgroup, 
	menu, nav, output, ruby, section, summary,
	time, mark, audio, video {
		margin: 0;
		padding: 0;
		border: 0;
		font-size: 100%;
		font: inherit;
		vertical-align: baseline;
	}
	/* HTML5 display-role reset for older browsers */
	article, aside, details, figcaption, figure, 
	footer, header, hgroup, menu, nav, section {
		display: block;
	}
	body {
		line-height: 1;
	}
	ol, ul {
		list-style: none;
	}
	blockquote, q {
		quotes: none;
	}
	blockquote:before, blockquote:after,
	q:before, q:after {
		content: '';
		content: none;
	}
	table {
		border-collapse: collapse;
		border-spacing: 0;
	}

    body {
		font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
		background-color: #13151a;
		color: #fff;
	}

    header {
        height: calc(100vh - var(--_nav-height));
        display: flex;
        align-items: center;
    }

    .show-info {
        display: flex;
        flex-direction: column;
        gap: 2rem;
        max-width: 1200px;
        margin-left: 2rem;
    }

    .logo {
        width: 350px;

        img {
            width: 100%;
            height: auto;
        }
    }

    .coming-soon {
        color: orange;
        font-size: 2rem;
        font-weight: 700;
    }

    .show-details {
        display: flex;
        align-items: center;
        gap: .5rem;
        font-size: .95rem;
    }

    .show-description {
        font-weight: 700;
        width: 100%;
        max-width: 500px;
    }

    .tabs-list {
        display: flex;
        gap: 1rem;
        margin-left: 2rem;
        border-bottom: 4px solid rgb(88, 88, 88);
    }

    .tab {
        cursor: pointer;
        position: relative;
        padding: 1rem 0;
        font-size: 1.5rem;
        font-weight: 700;
        color: white;
        opacity: .5;
    }

    .tab::after {
        content: '';
        position: absolute;
        bottom: -4px;
        left: 0;
        display: none;
        width: 100%;
        height: 4px;
        background-color: white;
    }

    .tab:hover {
        opacity: .65;
    }

    .tab:hover::after {
        display: block;
    }

    .active-tab {
        color: white;
        opacity: 1;
    }

    .active-tab::after {
        content: '';
        position: absolute;
        bottom: -4px;
        left: 0;
        display: block;
        width: 100%;
        height: 4px;
        background-color: white;
    }

    .tab-content {
        display: none;
        padding: 2rem;
    }

    .active-tab-content {
        display: block;
    }

    .tab-content h2 {
        font-size: 2rem;
        margin-bottom: 1rem;
        font-weight: 700;
    }

    .columns {
        display: flex;
        gap: 2rem;
    }

    .column {
        flex: 1;
    }

    .details-column {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .detail {
        display: flex;
        gap: .25rem;
        align-items: center;
    }

    .detail p {
        font-weight: 700;
    }

    .detail ul {
        list-style: none;
    }

    .detail ul li {
        display: inline;
        margin-right: .2rem;
    }

    .detail ul li::after {
        content: ',';
    }

    .detail ul li:last-child::after {
        content: '';
    }

    .rating {
        background-color: rgb(88, 88, 88);
        width: min-content;
        padding: 0.5rem .75rem;
        border-radius: 5px;
        font-size: .8rem;
        -webkit-touch-callout: none;
        -webkit-user-select: none;
        -khtml-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;
    }

    @media screen and (max-width: 768px) {

        header {
            height: calc(100vh - var(--_nav-height) - 2rem);
            margin-top: 2rem;
        }

        .show-info {
            margin-left: 0;
            margin-left: 1rem;
        }

        .logo {
            width: 300px;
        }

        .coming-soon {
            font-size: 1.5rem;
        }

        .show-details {
            flex-direction: column;
            gap: 1rem;
        }

        .tabs-list {
            margin-left: 1rem;
        }

        .columns {
            flex-direction: column;
        }
    }

</style>

<script>

    const nav = document.querySelector('nav')
    const header = document.querySelector('header')
    const scrollsize = 20
    const main = document.querySelector('main')

    if(!nav) {
        throw new Error('Nav not found');
    }

    const navHeight = nav.offsetHeight;

    if(!header) {
        throw new Error('Header not found');
    }

    header.style.setProperty('--_nav-height', `${navHeight}px`);

    if(!main) {
        throw new Error('Main not found');
    }

    // change main background color on scroll

    window.addEventListener('scroll', () => {
        if(window.scrollY > scrollsize) {
            main.style.backgroundColor = 'rgba(20, 20, 20, .8)';
        } else {
            main.style.backgroundColor = 'transparent';
        }
    });

    const tabs = document.querySelectorAll('.tab');

    const tabContents = document.querySelectorAll('.tab-content');

    tabs.forEach(tab => {
        tab.addEventListener('click', () => {
            tabs.forEach(t => t.classList.remove('active-tab'));
            tab.classList.add('active-tab');

            const tabId = tab.getAttribute('data-id');

            tabContents.forEach(content => {
                content.classList.remove('active-tab-content');
                if(content.id === tabId) {
                    content.classList.add('active-tab-content');
                }
            });
        });
    });

</script>

